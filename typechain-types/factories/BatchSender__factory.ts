/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  PayableOverrides,
} from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { BatchSender, BatchSenderInterface } from "../BatchSender";

const _abi = [
  {
    inputs: [],
    stateMutability: "payable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Deposit",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "receiver",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "EthTransferred",
    type: "event",
  },
  {
    stateMutability: "payable",
    type: "fallback",
  },
  {
    inputs: [
      {
        internalType: "address[]",
        name: "recipients",
        type: "address[]",
      },
      {
        internalType: "uint256[]",
        name: "amounts",
        type: "uint256[]",
      },
    ],
    name: "sendEther",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    stateMutability: "payable",
    type: "receive",
  },
];

const _bytecode =
  "0x6080604052600160008190555033600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550610a998061005c6000396000f3fe6080604052600436106100225760003560e01c8063bcc91d611461009957610060565b36610060577f4d6ce1e535dbade1c23defba91e23b8f791ce5edc0cc320257a2b364e4e384263460405161005691906107e9565b60405180910390a1005b7f4d6ce1e535dbade1c23defba91e23b8f791ce5edc0cc320257a2b364e4e384263460405161008f91906107e9565b60405180910390a1005b6100b360048036038101906100ae91906105dd565b6100b5565b005b600260005414156100fb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016100f2906107c9565b60405180910390fd5b6002600081905550600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610193576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161018a90610789565b60405180910390fd5b8181905084849050146101a557600080fd5b6000349050600033905060005b868690508110156103ee578484828181106101d0576101cf610937565b5b90506020020135831015610219576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161021090610769565b60405180910390fd5b600085858381811061022e5761022d610937565b5b90506020020135846102409190610820565b1161024e5761024d6108d9565b5b84848281811061026157610260610937565b5b90506020020135836102739190610820565b9250600087878381811061028a57610289610937565b5b905060200201602081019061029f91906105b0565b73ffffffffffffffffffffffffffffffffffffffff168686848181106102c8576102c7610937565b5b905060200201356040516102db9061072b565b60006040518083038185875af1925050503d8060008114610318576040519150601f19603f3d011682016040523d82523d6000602084013e61031d565b606091505b5050905080610361576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610358906107a9565b60405180910390fd5b7fcec1f18c3ab8ddaaa107a1591e3c369667eec613626611a8deaedef43069fcdd88888481811061039557610394610937565b5b90506020020160208101906103aa91906105b0565b8787858181106103bd576103bc610937565b5b905060200201356040516103d2929190610740565b60405180910390a15080806103e690610890565b9150506101b2565b5060008211156104df5760008173ffffffffffffffffffffffffffffffffffffffff168360405161041e9061072b565b60006040518083038185875af1925050503d806000811461045b576040519150601f19603f3d011682016040523d82523d6000602084013e610460565b606091505b50509050806104a4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161049b906107a9565b60405180910390fd5b7fcec1f18c3ab8ddaaa107a1591e3c369667eec613626611a8deaedef43069fcdd82846040516104d5929190610740565b60405180910390a1505b5050600160008190555050505050565b6000813590506104fe81610a4c565b92915050565b60008083601f84011261051a5761051961096b565b5b8235905067ffffffffffffffff81111561053757610536610966565b5b60208301915083602082028301111561055357610552610970565b5b9250929050565b60008083601f8401126105705761056f61096b565b5b8235905067ffffffffffffffff81111561058d5761058c610966565b5b6020830191508360208202830111156105a9576105a8610970565b5b9250929050565b6000602082840312156105c6576105c561097a565b5b60006105d4848285016104ef565b91505092915050565b600080600080604085870312156105f7576105f661097a565b5b600085013567ffffffffffffffff81111561061557610614610975565b5b61062187828801610504565b9450945050602085013567ffffffffffffffff81111561064457610643610975565b5b6106508782880161055a565b925092505092959194509250565b61066781610854565b82525050565b600061067a60278361080f565b91506106858261097f565b604082019050919050565b600061069d60098361080f565b91506106a8826109ce565b602082019050919050565b60006106c0600083610804565b91506106cb826109f7565b600082019050919050565b60006106e360108361080f565b91506106ee826109fa565b602082019050919050565b6000610706601f8361080f565b915061071182610a23565b602082019050919050565b61072581610886565b82525050565b6000610736826106b3565b9150819050919050565b6000604082019050610755600083018561065e565b610762602083018461071c565b9392505050565b600060208201905081810360008301526107828161066d565b9050919050565b600060208201905081810360008301526107a281610690565b9050919050565b600060208201905081810360008301526107c2816106d6565b9050919050565b600060208201905081810360008301526107e2816106f9565b9050919050565b60006020820190506107fe600083018461071c565b92915050565b600081905092915050565b600082825260208201905092915050565b600061082b82610886565b915061083683610886565b92508282101561084957610848610908565b5b828203905092915050565b600061085f82610866565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600061089b82610886565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156108ce576108cd610908565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052600160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b7f4e6f7420656e6f7567682062616c616e636520666f7220746865206e6578742060008201527f7061796d656e7400000000000000000000000000000000000000000000000000602082015250565b7f4e6f74206f776e65720000000000000000000000000000000000000000000000600082015250565b50565b7f5472616e73666572206661696c65642e00000000000000000000000000000000600082015250565b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00600082015250565b610a5581610854565b8114610a6057600080fd5b5056fea264697066735822122021c7726e876d973f44bc4a9697e05aa035cf87432d37198e739cc47e3a7dede164736f6c63430008060033";

type BatchSenderConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: BatchSenderConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class BatchSender__factory extends ContractFactory {
  constructor(...args: BatchSenderConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  deploy(
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<BatchSender> {
    return super.deploy(overrides || {}) as Promise<BatchSender>;
  }
  getDeployTransaction(
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): BatchSender {
    return super.attach(address) as BatchSender;
  }
  connect(signer: Signer): BatchSender__factory {
    return super.connect(signer) as BatchSender__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): BatchSenderInterface {
    return new utils.Interface(_abi) as BatchSenderInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): BatchSender {
    return new Contract(address, _abi, signerOrProvider) as BatchSender;
  }
}
